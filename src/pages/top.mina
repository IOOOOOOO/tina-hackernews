<config>
{
  "navigationBarTitleText": "Hackernews"
}
</config>

<template>
  <view class="view">
    <view class="header">
      <view class="link {{ type === 'top' ? 'active' : '' }}" data-type="top" bindtap="tapType">Top</view>
      <view class="link {{ type === 'new' ? 'active' : '' }}" data-type="new" bindtap="tapType">New</view>
      <view class="link {{ type === 'show' ? 'active' : '' }}" data-type="show" bindtap="tapType">Show</view>
      <view class="link {{ type === 'ask' ? 'active' : '' }}" data-type="ask" bindtap="tapType">Ask</view>
      <view class="link {{ type === 'jobs' ? 'active' : '' }}" data-type="jobs" bindtap="tapType">Jobs</view>
    </view>
    <view class="news-list">
      <view class="news-item" wx:for="{{ items }}" wx:for-item="item" wx:key="id" data-id="{{ item.id }}">
        <view class="score">{{ item.score }}</view>
        <view class="title">
          <view> {{ item.title }} </view>
          <view class="host"> {{ item.host }} </view>
        </view>
        <view class="meta">
          <view class="by link"> by {{ item.by }} </view>
          <view class="time"> {{ item.timeAgo }} ago </view>
          <view class="comments-link">
            | <view class="link"> {{ item.descendants }} comments </view>
          </view>
        </view>
      </view>
    </view>
  </view>
</template>

<script>
import { Page } from '@tinajs/tina'
import wechat from '../libraries/wechat'
import { fetchIdsByType, HACKERNEWS_STORY_TYPE, fetchItems } from '../api'
import { host, timeAgo } from '../utils/filters'

const DEFAULT_TYPE = 'top'
const PAGE_SIZE = 10

const slicing = (array, page) => array.slice(page * PAGE_SIZE, (page + 1) * PAGE_SIZE)

new Page({
  data: {
    type: DEFAULT_TYPE,
    page: 0,
    items: [],
  },

  compute (state) {
    return {
      items: state.items.map((item) => {
        return {
          ...item,
          host: host(item.url),
          timeAgo: timeAgo(item.time),
        }
      }),
    }
  },

  onLoad () {
    this.setData({
      msg: 'Hello from Home-Page!'
    })
    fetchIdsByType(HACKERNEWS_STORY_TYPE.TOP)
      .then((ids) => slicing(ids, this.data.page))
      .then((ids) => fetchItems(ids))
      .then((items) => this.setData({ items }))
      .finally(wechat.loading())
  },

  methods: {
    tapType (event) {
      let type = event.currentTarget.dataset.type
      if (type === this.data.type) {
        return
      }
      this.setData({ type })
    },
  },
})
</script>

<style lang="less">
.view {
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  display: flex;
  flex-direction: column;
}

.header {
  display: flex;
  background-color: #ff6600;
  justify-content: space-around;
  align-items: center;
  color: rgba(255,255,255,0.5);
  height: 36px;
  line-height: 36px;
  font-size: 12px;
  .link {
    padding: 0 1em;
    &.active {
      color:  #fff;
      font-weight: bold;
      box-shadow: 0 -2px 0 0 #fff inset;
    }
  }
}

.news-list {
  flex: 1;
  height: 100%;
  overflow-x: hidden;
  overflow-y: scroll;
  .news-item {
    background-color: #fff;
    padding: 20px 30px 20px 80px;
    border-bottom: 1px solid #eee;
    position: relative;
    line-height: 20px;
    .score {
      color: #ff6600;
      font-size: 1.1em;
      font-weight: 700;
      position: absolute;
      top: 50%;
      left: 0;
      width: 80px;
      text-align: center;
      margin-top: -10px;
    }
    .meta, .host {
      font-size: .85em;
      color: #828282;
      a {
        color: #828282;
        text-decoration: underline;
        &:hover {
          color: #ff6600;
        }
      }
    }
    .title, .meta {
      view {
        display: inline;
      }
    }
    .link {
      text-decoration: underline;
    }
  }
}
</style>
